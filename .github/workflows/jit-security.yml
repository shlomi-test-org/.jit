name: Workflows generated by the MVS plan
on:
  workflow_dispatch:
    inputs:
       client_payload:
          description: The Client payload
          required: true
jobs:
  api-security-detection-workflow-api-security:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'api-security-detection' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-api-security'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - name: 
      uses: jitsecurity-controls/jit-github-action@v2.5
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: 899025839375.dkr.ecr.us-east-1.amazonaws.com/zap:latest
        security_control_args: --scan_mode api --authentication_mode ${{fromJSON(github.event.inputs.client_payload).context.asset.authentication_mode }} --target_url ${{fromJSON(github.event.inputs.client_payload).context.asset.target_url }} --exclude_paths ${{fromJSON(github.event.inputs.client_payload).context.asset.exclude_paths }} --api_domain ${{fromJSON(github.event.inputs.client_payload).context.asset.api_domain }} --login_url ${{fromJSON(github.event.inputs.client_payload).context.asset.login_page_url }} --username ${{fromJSON(github.event.inputs.client_payload).context.asset.username }} --username_selector ${{fromJSON(github.event.inputs.client_payload).context.asset.username_css_selector }} --password_selector ${{fromJSON(github.event.inputs.client_payload).context.asset.password_css_selector }} --rule_set_path rule_sets/comprehensive-api.yml

        dispatch_type: workflow
        context: ${{toJSON(fromJSON(github.event.inputs.client_payload).context)}}
        runner_setup: ${{toJSON(fromJSON(github.event.inputs.client_payload).context.job.runner.setup)}}

  api-security-detection-workflow-api-security-deployment:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'api-security-detection' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-api-security-deployment'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - name: 
      uses: jitsecurity-controls/jit-github-action@v2.5
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: 899025839375.dkr.ecr.us-east-1.amazonaws.com/zap:latest
        security_control_args: --scan_mode api --authentication_mode ${{fromJSON(github.event.inputs.client_payload).context.asset.authentication_mode }} --target_url ${{fromJSON(github.event.inputs.client_payload).context.asset.target_url }} --exclude_paths ${{fromJSON(github.event.inputs.client_payload).context.asset.exclude_paths }} --api_domain ${{fromJSON(github.event.inputs.client_payload).context.asset.api_domain }} --login_url ${{fromJSON(github.event.inputs.client_payload).context.asset.login_page_url }} --username ${{fromJSON(github.event.inputs.client_payload).context.asset.username }} --username_selector ${{fromJSON(github.event.inputs.client_payload).context.asset.username_css_selector }} --password_selector ${{fromJSON(github.event.inputs.client_payload).context.asset.password_css_selector }} --rule_set_path rule_sets/deployment-api.yml

        dispatch_type: workflow
        context: ${{toJSON(fromJSON(github.event.inputs.client_payload).context)}}
        runner_setup: ${{toJSON(fromJSON(github.event.inputs.client_payload).context.job.runner.setup)}}

  docker-scan:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'docker-scan' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-docker-scan'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - name: trivy
      uses: jitsecurity-controls/jit-github-action@v2.5
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-trivy-alpine:latest
        security_control_args: --quiet config --severity HIGH,CRITICAL -f json --ignorefile /opt/.trivyignore \${WORK_DIR:-.}
        dispatch_type: workflow
        context: ${{toJSON(fromJSON(github.event.inputs.client_payload).context)}}
        runner_setup: ${{toJSON(fromJSON(github.event.inputs.client_payload).context.job.runner.setup)}}

  enrich:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'enrich' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-enrichment-code'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - name: enrichment
      uses: jitsecurity-controls/jit-github-action@v2.5
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-enrichment-slim:main
        security_control_args: --path \${WORK_DIR:-.}
        dispatch_type: workflow
        context: ${{toJSON(fromJSON(github.event.inputs.client_payload).context)}}
        runner_setup: ${{toJSON(fromJSON(github.event.inputs.client_payload).context.job.runner.setup)}}

  remediation-pr:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'remediation-pr' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-remediation-pr'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - name: remediation-pr
      uses: jitsecurity-controls/jit-github-action@v2.5
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/open-remediation-pr-alpine:main
        security_control_args: --github-token ${{fromJSON(github.event.inputs.client_payload).payload.github_token}} --fix-pr-config ${{fromJSON(github.event.inputs.client_payload).payload.fix_pr_config}} --output-file \$REPORT_FILE
        security_control_output_file: /opt/code/jit-report/results.json
        dispatch_type: workflow
        context: ${{toJSON(fromJSON(github.event.inputs.client_payload).context)}}
        runner_setup: ${{toJSON(fromJSON(github.event.inputs.client_payload).context.job.runner.setup)}}

  secret-detection:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'secret-detection' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-secret-detection'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - name: gitleaks
      uses: jitsecurity-controls/jit-github-action@v2.5
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-gitleaks-alpine:latest
        security_control_args: detect --config \$GITLEAKS_CONFIG_FILE_PATH --source \${WORK_DIR:-.} -v --report-format json --report-path \$REPORT_FILE --redact --no-git --exit-code 0
        security_control_output_file: /tmp/report.json
        dispatch_type: workflow
        context: ${{toJSON(fromJSON(github.event.inputs.client_payload).context)}}
        runner_setup: ${{toJSON(fromJSON(github.event.inputs.client_payload).context.job.runner.setup)}}

  software-component-analysis:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'software-component-analysis' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sca'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - name: osv-scanner
      uses: jitsecurity-controls/jit-github-action@v2.5
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-osv-scanner-alpine:latest
        security_control_args: --recursive \${WORK_DIR:-.}
        dispatch_type: workflow
        context: ${{toJSON(fromJSON(github.event.inputs.client_payload).context)}}
        runner_setup: ${{toJSON(fromJSON(github.event.inputs.client_payload).context.job.runner.setup)}}

  software-component-analysis-go:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'software-component-analysis-go' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sca'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - name: nancy
      uses: jitsecurity-controls/jit-github-action@v2.5
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-nancy-alpine:latest
        security_control_args: 
        dispatch_type: workflow
        context: ${{toJSON(fromJSON(github.event.inputs.client_payload).context)}}
        runner_setup: ${{toJSON(fromJSON(github.event.inputs.client_payload).context.job.runner.setup)}}

  software-component-analysis-js:
    if: fromJSON(github.event.inputs.client_payload).payload.workflow_job_name == 'software-component-analysis-js' && fromJSON(github.event.inputs.client_payload).payload.workflow_slug == 'workflow-sca'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - name: npm-audit
      uses: jitsecurity-controls/jit-github-action@v2.5
      with:
        docker_user: jit-bot
        docker_password: ${{fromJSON(github.event.inputs.client_payload).payload.container_registry_token}}
        security_control: ghcr.io/jitsecurity-controls/control-npm-audit-slim:latest
        security_control_args: 
        security_control_output_file: /code/jit-report/enriched-audit-results.json
        dispatch_type: workflow
        context: ${{toJSON(fromJSON(github.event.inputs.client_payload).context)}}
        runner_setup: ${{toJSON(fromJSON(github.event.inputs.client_payload).context.job.runner.setup)}}
